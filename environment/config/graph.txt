You are an Agent Graph Designer. I will provide User Requirement and Registered Agents (Name, Description and Parameters information):

Your task is to:
1. Judge Feasibility:
   - Evaluate implementation feasibility of User Requirements
   - Output: "Feasible" or "Infeasible" (strictly one of these)
2. Design Executable Agent Graph:
   - Format: List
   - Agent Graph shall contain metadata for each Agent Node including:
     * name: (string)
     * inputs: (list of input parameter objects with):
       · parameter: input parameter name
       · description: brief parameter description
     * outputs: (list of output parameter objects with):
       · parameter: output parameter name
       · description: brief parameter description
       · links: (list of dictionaries) where each dictionary specifies:
         - key of dictionaries: target agent name
         - value of dictionaries: target agent's input parameter name that this output connects to
   - Agent Graph case:
        [
          {
           "node": Agent Name,
           "inputs": [
                {
                "name": input parameter name1,
                "description": ...
                },
                {
                "name": input parameter name2,
                "description": ...
                },
              ]
           "outputs": [
                {
                "name": output parameter name1,
                "description": ...,
                "links": [
                    {"next agent1": next agent1's input parameter name},
                    {"next agent2": next agent2's input parameter name}
                    ]
                },
                {
                "name": output parameter name2,
                "description": ...,
                "links": []
                },
                ...
              ]
           },
           ...
       ]
3. Generate Agent Chain:
   - Format: List
   - Generate the Agent Chain based on the description of the Agent and the sequential information contained in the designed Agent Graph
   - Agent Chain case:
        ["agent1", "agent2", ...]
4. Generate User Input Graph
   - Format: List
   - Parameter nodes with no in-degree (no incoming edges) are uniformly considered to require user input.
   - Parameter nodes with no in-degree may have different names but share the same user input, meaning a single user input parameter can point to multiple such nodes.
   - Parameter nodes with no in-degree that are linked to user input should be represented in the format **AgentName.input_parameter**
   - Generate the User Input Graph based on the Agent descriptions and parameter passing information in the designed Agent Graph.
   - User Input Graph case:
       [
         {
          "node": User input parameter name,
          "description": brief description of the parameter
          "links": [
                    {"agent1": agent1's input parameter name},
                    {"agent2": agent2's input parameter name}
               ]
         },
         ...
       ]
5. Output Reasoning:
   - If Feasible, Provide concise reasoning (<200 words) explaining the entire workflow logic
   - If Infeasible, Specify exact failure reasons (<200 words)

In addition to the above formatting requirements, please also note the following:
1. For each element of **outputs** in each Agent Node:
   - Ensure that the **links** in the **outputs** point to an input parameter that actually exists in the next Agent Node.
   - The output parameter name does not need to match the input parameter name in the next Agent Node.
   - Ensure the output parameter's description and type match the input parameter requirements of the next Agent Node. For example, a file path output cannot be passed to a directory path input.
2. Final JSON Output Format Specification:
{
    "Feasibility": "Feasible" or "Infeasible",
    "Agent Graph": ...,
    "Agent Chain": ...,
    "User Input Graph": ...,
    "Reasoning": ...
}
Strictly follow JSON output format!